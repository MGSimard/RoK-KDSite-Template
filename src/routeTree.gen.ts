/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as KvkKvkImport } from './routes/kvk/$kvk'

// Create Virtual Routes

const MigrationLazyImport = createFileRoute('/migration')()
const InformationLazyImport = createFileRoute('/information')()

// Create/Update Routes

const MigrationLazyRoute = MigrationLazyImport.update({
  id: '/migration',
  path: '/migration',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/migration.lazy').then((d) => d.Route))

const InformationLazyRoute = InformationLazyImport.update({
  id: '/information',
  path: '/information',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/information.lazy').then((d) => d.Route))

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const KvkKvkRoute = KvkKvkImport.update({
  id: '/kvk/$kvk',
  path: '/kvk/$kvk',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/information': {
      id: '/information'
      path: '/information'
      fullPath: '/information'
      preLoaderRoute: typeof InformationLazyImport
      parentRoute: typeof rootRoute
    }
    '/migration': {
      id: '/migration'
      path: '/migration'
      fullPath: '/migration'
      preLoaderRoute: typeof MigrationLazyImport
      parentRoute: typeof rootRoute
    }
    '/kvk/$kvk': {
      id: '/kvk/$kvk'
      path: '/kvk/$kvk'
      fullPath: '/kvk/$kvk'
      preLoaderRoute: typeof KvkKvkImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/information': typeof InformationLazyRoute
  '/migration': typeof MigrationLazyRoute
  '/kvk/$kvk': typeof KvkKvkRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/information': typeof InformationLazyRoute
  '/migration': typeof MigrationLazyRoute
  '/kvk/$kvk': typeof KvkKvkRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/information': typeof InformationLazyRoute
  '/migration': typeof MigrationLazyRoute
  '/kvk/$kvk': typeof KvkKvkRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/information' | '/migration' | '/kvk/$kvk'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/information' | '/migration' | '/kvk/$kvk'
  id: '__root__' | '/' | '/information' | '/migration' | '/kvk/$kvk'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  InformationLazyRoute: typeof InformationLazyRoute
  MigrationLazyRoute: typeof MigrationLazyRoute
  KvkKvkRoute: typeof KvkKvkRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  InformationLazyRoute: InformationLazyRoute,
  MigrationLazyRoute: MigrationLazyRoute,
  KvkKvkRoute: KvkKvkRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/information",
        "/migration",
        "/kvk/$kvk"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/information": {
      "filePath": "information.lazy.tsx"
    },
    "/migration": {
      "filePath": "migration.lazy.tsx"
    },
    "/kvk/$kvk": {
      "filePath": "kvk/$kvk.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
